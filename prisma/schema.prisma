// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Year {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
}

enum Events {
  TECH_ROADIES
  NON_TECH_ROADIES
  DEBUG
  QUIZMANIA
  CODE_RELAY
  PANCHAYAT
  SPELL_BEE
  ROBO_RACE
  ROBO_WAR
  TREASURE_HUNT
  GULLY_CRICKET
  BEACH_VOLLEY
  DUNK_THE_BALL
  DART
  PING_PONG
  FOOTSOL
  SMASH
  SOLO_DANCE
  DUO_DANCE
  GROUP_DANCE
  SOLO_SINGING
  DUO_SINGING
  GROUP_SINGING
  SKIT
  INFORMAL_ANCHORING
  FORMAL_ANCHORING
}

enum ParticipationType {
  SOLO
  DUO
  TRIO
  QUAD
  QUINTET
  GROUP
}

enum EventType {
  TECHNICAL
  NON_TECHNICAL
  CULTURAL
  SPORTS
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum NotificationType {
  TEAM_INVITE
  EVENT_REMINDER
  GENERAL
  ANNOUNCEMENT
  RESULT_DECLARATION
  INVITE_ACCEPTED
  INVITE_REJECTED
  EVENT_CANCELLED
  POSITION_UPDATE
  QUALIFICATION_UPDATE
}

enum TshirtSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  phone              String              @unique
  college            String              @default("Silicon Institute of Technology, Sambalpur")
  sic                String              @unique
  role               Role                @default(USER)
  year               Year
  imageUrl           String?
  password           String
  eventParticipation Int                 @default(0)
  refreshTokens      RefreshToken[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  eventParticipants  EventParticipant[]
  eventHeads         EventHead[]
  eventAttendances   EventAttendance[]
  fcmToken           String?
  notifications      Notification[]
  eventResults       EventResult[]
  notificationQueue  NotificationQueue[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @db.Text
  tokenHash String   @unique @db.VarChar(255)
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                  Int                @id @default(autoincrement())
  name                String
  eventName           Events             @unique
  eventType           EventType
  description         String             @db.Text
  imageUrl            String
  date                DateTime
  time                String
  venue               String
  partialRegistration Boolean            @default(false)
  participationType   ParticipationType
  eventHeads          EventHead[]
  eventAttendances    EventAttendance[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  participants        EventParticipant[]
  prizePool           Int                @default(0)
  registrationFee     Int                @default(0)
  eventResults        EventResult[]
}

model EventHead {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EventAttendance {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EventParticipant {
  id         Int      @id @default(autoincrement())
  eventId    Int
  userId     Int
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  teamLeader Boolean  @default(true)

  updatedAt         DateTime           @default(now())
  isConfirmed       Boolean            @default(false)
  isAttended        Boolean            @default(false)
  qrCode            String?
  mainParticipantId Int? // ID of the main participant who registered the team
  mainParticipant   EventParticipant?  @relation("TeamMembers", fields: [mainParticipantId], references: [id], onDelete: SetNull)
  otherParticipants EventParticipant[] @relation("TeamMembers")
  treasureHunt      TreasureHunt?
  clueScans         ClueScans[]

  @@unique([eventId, userId])
}

model EventResult {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position  Int
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String           @db.Text
  type      NotificationType
  metadata  Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AllPayments {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  status    Boolean  @default(false)
  refId     String
  for       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TshirtPayments {
  id        Int        @id @default(autoincrement())
  userId    Int
  amount    Int        @default(1)
  size      TshirtSize
  refId     String
  status    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EventPayments {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  amount    Int
  refId     String
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ClueScans {
  id                   Int              @id @default(autoincrement())
  clueObjectId         Int
  eventParticipationId Int
  scannedAt            DateTime         @default(now())
  eventParticipation   EventParticipant @relation(fields: [eventParticipationId], references: [id])
  clueObject           ClueObject       @relation(fields: [clueObjectId], references: [id])
}

model ClueObject {
  id        Int         @id @default(autoincrement())
  clue      String
  qrCode    String
  clueScans ClueScans[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  firstClues  Clues[] @relation("FirstClue")
  secondClues Clues[] @relation("SecondClue")
  thirdClues  Clues[] @relation("ThirdClue")
  finalClues  Clues[] @relation("FinalClue")
}

model Clues {
  id           Int      @id @default(autoincrement())
  firstClueId  Int
  secondClueId Int
  thirdClueId  Int
  finalClueId  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  firstClue  ClueObject @relation("FirstClue", fields: [firstClueId], references: [id])
  secondClue ClueObject @relation("SecondClue", fields: [secondClueId], references: [id])
  thirdClue  ClueObject @relation("ThirdClue", fields: [thirdClueId], references: [id])
  finalClue  ClueObject @relation("FinalClue", fields: [finalClueId], references: [id])

  treasureHunt TreasureHunt?
}

model TreasureHunt {
  id                   Int              @id @default(autoincrement())
  eventParticipationId Int              @unique
  cluesId              Int              @unique
  clues                Clues            @relation(fields: [cluesId], references: [id])
  eventParticipant     EventParticipant @relation(fields: [eventParticipationId], references: [id], onDelete: Cascade)
  hasScannedWinnerQr   Boolean          @default(false)
  winnerScanTime       DateTime?
}

model WinnerClue {
  id        Int      @id @default(autoincrement())
  clue      String
  qrCode    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NotificationQueue {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType @default(GENERAL)
  metadata  Json?
  createdAt DateTime         @default(now())
  sent      Boolean          @default(false)
  sentAt    DateTime?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}
