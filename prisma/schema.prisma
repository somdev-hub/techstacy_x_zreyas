// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Year {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
}

enum Events {
  TECH_ROADIES
  NON_TECH_ROADIES
  DEBUG
  QUIZMANIA
  CODE_RELAY
  PANCHAYAT
  SPELL_BEE
  ROBO_RACE
  ROBO_WAR
  TRESURE_HUNT
  GULLEY_CRICKET
  DUNK_THE_BALL
  DART
  PING_PONG
  FOOTSOL
  SOLO_DANCE
  DUO_DANCE
  GROUP_DANCE
  SOLO_SINGING
  DUO_SINGING
  GROUP_SINGING
  SKIT
}

enum ParticipationType {
  SOLO
  DUO
  TRIO
  QUAD
  QUINTET
  GROUP
}

enum EventType {
  TECHNICAL
  NON_TECHNICAL
  CULTURAL
  SPORTS
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum NotificationType {
  TEAM_INVITE
  EVENT_REMINDER
  GENERAL
}

model User {
  id                 Int                @id @default(autoincrement())
  name               String
  email              String             @unique
  phone              String             @unique
  college            String             @default("Silicon Institute of Technology, Sambalpur")
  sic                String             @unique
  role               Role               @default(USER)
  year               Year
  imageUrl           String?
  password           String
  eventParticipation Int                @default(0)
  refreshTokens      RefreshToken[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  eventParticipants  EventParticipant[]
  eventHeads         EventHead[]
  eventAttendances   EventAttendance[]
  fcmToken           String?
  notifications      Notification[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(255)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Event {
  id                Int                @id @default(autoincrement())
  name              String
  eventName         Events             @unique
  eventType         EventType
  description       String
  imageUrl          String
  date              DateTime
  time              String
  venue             String
  participationType ParticipationType
  eventHeads        EventHead[]
  eventAttendances  EventAttendance[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  participants      EventParticipant[]
  prizePool         Int                @default(0)
}

model EventHead {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EventAttendance {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model EventParticipant {
  id                Int                @id @default(autoincrement())
  eventId           Int
  userId            Int
  event             Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  teamLeader        Boolean            @default(true)
  
  updatedAt         DateTime           @default(now())
  isConfirmed       Boolean            @default(false)
  isAttended        Boolean            @default(false)  // Moved from EventQR
  qrCode            String?            // Moved from EventQR
  mainParticipantId Int?               // ID of the main participant who registered the team
  mainParticipant   EventParticipant?  @relation("TeamMembers", fields: [mainParticipantId], references: [id], onDelete: SetNull)
  otherParticipants EventParticipant[] @relation("TeamMembers")
}

// Remove EventQR model since we merged it into EventParticipant

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String           @db.Text
  type        NotificationType
  metadata    Json?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}
